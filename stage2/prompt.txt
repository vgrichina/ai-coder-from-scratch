Start response with very laconic one line overview of changes done.

Let's think how to refactor coder to introduce new features:
- REPL command
    - should take list of files like other commands, but also allow to add/drop them interactively
    - use commands like /commit
    - keep conversation history and include it in LLM request
    - /run command should execute given command; include both command and output in chat history
    - use colors (ansi codes directly, avoid chalk)
- streaming LLM response
    - needs to abort the current request on Ctrl-C, don't crash whole program
    - beware of [DONE]
    - don't accept new commands before receiving full response
- don't use external files for prompt templates 
- make sure that when commiting:
    - first add files using `git add`
    - the changes are applied to correct files (filename parsed from response)
    - newly created files are supported
    - commit message generated (run another query with LLM, just feed it user prompt + `git diff HEAD`)

