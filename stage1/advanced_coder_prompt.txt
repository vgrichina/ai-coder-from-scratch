Make sure to generate full implementation (no TODOs) based on following spec.

Think step by step before generation if needed.

# Commands

## Interactive Mode
    /ask <question>  Ask about code
    /add <file>      Add file to context
    /drop <file>     Remove file
    /commit          Create git commit
    /undo            Revert last change
    /run <cmd>       Execute shell command
    /help            Show this help

When no slash prefix, interpret as coding prompt

Shell-like prompt shown when ready: `ai-coder> `

## CLI Mode
    ai-coder [options] <prompt>
      -k, --key <key>            API key (default: $OPENROUTER_API_KEY)
      -u, --url <url>            API URL (default: https://openrouter.ai/api/v1/chat/completions)
      -m, --model <model_name>   LLM model name (default: anthropic/claude-3.5-sonnet)
      -i, --interactive          Start interactive mode
      -h, --help                 Show this help


# Implementation Details

COMMON MISTAKES TO AVOID:
- IMPORTANT: don't use `const` for anything. Always use `let`. If you used `const` â€“ don't try to set variable again.
- don't require() external npm packages, only Node native 
- VERY VERY IMPORTANT: ALWAYS escape ` backticks inside of JS template literals. For example: ```hello -> `\`\`\`hello`.
- when using readline need to not forget to require()
- "node-fetch" package NOT ALLOWED. NOT EVER.

LLM API:
- use OpenRouter API which is compatible with OpenAI
- response format is the same as OpenAI
- Use native https module. 
- Use Authorization: Bearer <API key here>
- steam: false
- Display LLM response when it arrives. Extract code only from final result

Error Handling:
- Log all errors with stack traces
- Show user-friendly messages
- Include request/response details

Chat History:
- Track conversation
- Include history in API calls
- Store shell command outputs

File Management:
- Create/update multiple files
- Track file dependencies
- Handle file removals
- Support .gitignore
- Only track files specified by user or created/changed by tool
- Don't keep files in memory. Read from disk as needed, update on disk directly.
- Don't use hashes

Debugging:
- Use debug package to output debugging logs at important parts like I/O

Git:

- Use external `git` process
- Git commit template:

    summary

    Original prompt:
    <prompt>

    Changes:
    - file1: change
    - file2: change


# Bootstrap coder for reference:




